<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_stop_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vSpeed = 0;
hSpeed = 0;
grav = 0.7;
jumpHeight = 10;
moveSpeed = 5;
canJump = true;
justTurned = true;
ladder = false;
//1 = right, -1 = left
globalvar facing;
facing = 1;
canMove = true;
image_speed = 0;
image_index = 0;
pushpull = false;
distance = 0;
actualDiff = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (canJump) {
   var below = instance_place(x, y+1, par_wall);
   distance = (sprite_height-10)/2 + below.sprite_height / 2;
   actualDiff = below.y - y;
   if (distance - actualDiff &gt; 1.8) {
      y-=2;
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check(vk_left) &amp;&amp; !place_meeting(x-moveSpeed,y, obj_platform) &amp;&amp; canMove) {
   if (facing == 1) {
      justTurned = true;
   }
   else 
      justTurned = false;
   hSpeed = -moveSpeed;
   facing = -1;
   sprite_index = spr_left;
}

if (keyboard_check(vk_right) &amp;&amp; !place_meeting(x+moveSpeed,y, obj_platform) &amp;&amp; canMove &amp;&amp; !keyboard_check(vk_control)) {
   if (facing == -1) {
      justTurned = true;
   }
   else
      justTurned = false;
   hSpeed = moveSpeed;
   facing = 1;
   sprite_index = spr_right;
}
image_speed = 0.2;
if (keyboard_check_released(vk_left) || keyboard_check_released(vk_right)) {
   if (facing == 1)
      sprite_index = spr_stop_right;
   else
       sprite_index = spr_stop_left;
   image_speed = 0;
}

if ((keyboard_check_direct(vk_left) &amp;&amp; keyboard_check_direct(vk_right))) {
   hSpeed = 0;
   image_speed = 0;
}

if (keyboard_check_direct(vk_space) &amp;&amp; canJump &amp;&amp; facing == 1) {
 //  sprite_index = spr_jump;
   vSpeed = -jumpHeight;
}

vSpeed += grav;

if (keyboard_check(vk_control) &amp;&amp; place_meeting(x-1,y,obj_movable)) {
    var inst;
    inst = instance_place(x-1, y, obj_movable);
    with (inst) {
        if (keyboard_check(vk_left) &amp;&amp; place_free(obj_player.x-34, y)) {
            obj_player.sprite_index = spr_push;
            obj_player.hSpeed = -2;
            inst.x += -2;
           
        }
        else if (keyboard_check(vk_left) &amp;&amp; !place_free(obj_player.x-34, y)) {
            obj_player.sprite_index = spr_push;
        }
        if (keyboard_check(vk_right) &amp;&amp; place_free(obj_player.x+2, y)) {
            obj_player.sprite_index = spr_pull;
            obj_player.hSpeed = 2;
            inst.x += 2;
        }
        //image_speed = 0.15;
    }
}

//Ladder collision
if ((keyboard_check(vk_up) || keyboard_check(vk_down)) &amp;&amp; place_meeting(x, y, par_ladder)) {
      ladder = true;
}

if (ladder) {
   vSpeed = 0;
   if (facing == 1) {
      sprite_index = spr_ladder_right;
   }
   else {
      sprite_index = spr_ladder_left;
   }
   if (keyboard_check(vk_up)) {
      vSpeed = -2;
      image_speed = 0.2;
   }
   else if (keyboard_check(vk_down)) {
      vSpeed = 2;
      image_speed = 0.2;
   }
   else if (keyboard_check(vk_left)) {
      x += -2;
   }
   else if (keyboard_check(vk_right)) {
      x += 2;
      image_speed = 0.2;
   }
   else 
      image_speed = 0;
   if (!place_meeting(x, y, par_ladder))
      ladder = false;
   if (keyboard_check(vk_space)) {
      vSpeed = -jumpHeight/2;
      ladder = false;
   }
   hSpeed = 0;
}

//Horizontal collision
if (place_meeting(x + hSpeed, y, par_wall)) {
   while (!place_meeting(x + sign(hSpeed), y, par_wall)) {
      x += sign(hSpeed);
   }
   hSpeed = 0;
}
x += hSpeed;

//Vertical collision
if (place_meeting(x, y + vSpeed, par_wall)) {
   while (!place_meeting(x, y+sign(vSpeed), par_wall)) {
      y += sign(vSpeed);
       if (facing == 1){
          //sprite_index = spr_land;   
      }  
   }
  
   if (sign(vSpeed) == 1) {
      canJump = true;    
      hSpeed = 0; 
   }
   vSpeed = 0; 
   canMove = true;
}
else {
   canJump = false;
}

y += vSpeed;

if (justTurned) {
    if (facing == 1) {
       instance_deactivate_object(obj_spikes);
    }
    else {
       instance_activate_object(obj_spikes);    
    } 
}

if position_meeting(x-sprite_xoffset+sprite_width/2,y-sprite_yoffset+sprite_height,obj_platform)
{
  objID=instance_position(x-sprite_xoffset+sprite_width/2,y-sprite_yoffset+sprite_height,obj_platform)
  hspeed = objID.hspeed;
}
else {
  hspeed=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
